clear all;
clc;

%% Initial parameters
a = 0.00007;     %rate at which a baby is born into a susceptible class
B = 0.02500;     %exrate at which a person is exposed to the Covid-19 infection
k = 0.07142;     %rate at which an exposed persone becomes infected with Covid-19 virus
d_1 = 0.0008;    %rate at which quarantined person dies from his or her Covid-19 infection
d_2 = 0.00729;   %rate at which an infected person dies from his or her Covid-19 infection
v = 0.01430;     %rate at which an exposed person is quarantined
g_1 = 0.00025;   %rate at which an infected person recovers from his or her Covid-19 infection
g_2 = 0.00051;   %rate at which an exposed person recovers from his or her Covid-19 infection
g_3 = 0.00178;   %rate at which a quarantined person recovers from his or her Covid-19 infection
phi = 0.00288;   %rate at which an infected person is quarantined
u = 0.00002;

s0 = 0.95631246;          %initial proportion of Susceptible
e0 = 3.6448*(10^(-02));   %initial proportion of Exposed
i0 = 3.0487*(10^(-03));   %initial proportion of Infected
q0 = 1.2195*(10^(-03));   %initial proportion of Quarantined
r0 = 2.9709*(10^(-03));

f1 = u+k+d_2+v;
f2 = u+d_2+g_1+phi;
f3 = u+d_1+g_3;



n=100;
t=0;
for i=1:n
    t=t+1;
    
    s_not = s0*exp(-u*t);
    e_not = e0*exp(-f1*t);
    i_not = i0*exp(-f2*t);
    q_not = q0*exp(-f3*t);
    r_not = r0*exp(-u*t);
    
    % s=dsolve('Ds+u*s-a+(B*s0*exp(-u*t))*(i0*exp(-f2*t)+q0*exp(-f3*t))=0','s(0)=0')
    s =exp(-t*u)*((a*f3*exp(t*u) + B*q0*s0*u*exp(-f3*t))/(f3*u) + (B*i0*s0*exp(-f2*t))/f2) - exp(-t*u)*((a*f3 + B*q0*s0*u)/(f3*u) + (B*i0*s0)/f2);

    % e=dsolve('De+f1*e-(B*s0*exp(-u*t))*(i0*exp(-f2*t)+q0*exp(-f3*t))=0','e(0)=0')
    e =exp(-f1*t)*((B*i0*s0)/(f2 - f1 + u) + (B*q0*s0)/(f3 - f1 + u)) - exp(-f1*t)*((B*i0*s0*exp(f1*t)*exp(-f2*t)*exp(-t*u))/(f2 - f1 + u) + (B*q0*s0*exp(f1*t)*exp(-f3*t)*exp(-t*u))/(f3 - f1 + u));

    % i=dsolve('Di+f2*i-(k*e0*exp(-f1*t))=0','i(0)=0')
    i1 =(e0*k*exp(-f2*t))/(f1 - f2) - (e0*k*exp(f2*t - f1*t)*exp(-f2*t))/(f1 - f2);

    % q=dsolve('Dq+f3*q-(v*e0*exp(-f1*t))-(phi*i0*exp(-f2*t))=0','q(0)=0')
    q =exp(-f3*t)*((i0*phi)/(f2 - f3) + (e0*v)/(f1 - f3)) - exp(-f3*t)*((i0*phi*exp(f3*t)*exp(-f2*t))/(f2 - f3) + (e0*v*exp(-f1*t)*exp(f3*t))/(f1 - f3));

    % r=dsolve('Dr+u*r-(g_2*e0*exp(-f1*t))-(g_1*i0*exp(-f2*t))-(g_3*q0*exp(-f3*t))=0','r(0)=0')
    r =exp(-t*u)*((e0*g_2)/(f1 - u) + (g_1*i0)/(f2 - u) + (g_3*q0)/(f3 - u)) - exp(-t*u)*((e0*g_2*exp(-f1*t)*exp(t*u))/(f1 - u) + (g_1*i0*exp(-f2*t)*exp(t*u))/(f2 - u) + (g_3*q0*exp(-f3*t)*exp(t*u))/(f3 - u));

%% second part
    % s1=dsolve('Ds1+u*s1+B*(s0*exp(-u*t)*(((e0*k*exp(-f2*t))/(f1 - f2) - (e0*k*exp(f2*t - f1*t)*exp(-f2*t))/(f1 - f2))+(exp(-f3*t)*((i0*phi)/(f2 - f3) + (e0*v)/(f1 - f3)) - exp(-f3*t)*((i0*phi*exp(f3*t)*exp(-f2*t))/(f2 - f3) + (e0*v*exp(-f1*t)*exp(f3*t))/(f1 - f3))))+(exp(-t*u)*((a*f3*exp(t*u) + B*q0*s0*u*exp(-f3*t))/(f3*u) + (B*i0*s0*exp(-f2*t))/f2) - exp(-t*u)*((a*f3 + B*q0*s0*u)/(f3*u) + (B*i0*s0)/f2))*(i0*exp(-f2*t)+q0*exp(-f3*t)))=0','s1(0)=0')
    s1 = - exp(-t*u)*((B^2*f3^2*i0^2*s0*exp(-f2*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (B*a*i0*exp(t*u - f2*t))/(- u^2 + f2*u) - (B*a*q0*exp(t*u - f3*t))/(- u^2 + f3*u) - (B^2*f1^2*i0^2*s0*exp(-f2*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (exp(-f1*t)*(B*e0*k*s0 - (B*e0*f3*k*s0 + B*e0*f2*s0*v)/f1 + B*e0*s0*v))/(f1*f2 + f1*f3 - f2*f3 - f1^2) - (B^2*f1^2*q0^2*s0*exp(-f3*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B^2*f2^2*q0^2*s0*exp(-f3*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) - (B^2*i0^2*s0*exp(-2*f2*t))/(2*f2*(f2 - f3)) + (B^2*q0^2*s0*exp(-2*f3*t))/(2*f3*(f2 - f3)) + (B*a*i0*exp(-f2*t))/(f2*u) + (B*a*q0*exp(-f3*t))/(f3*u) - (B^2*f2*i0^2*s0*exp(-f2*t))/((f1 - f2)*(f2 - f3)^2) - (B^2*f3*q0^2*s0*exp(-f3*t))/((f1 - f3)*(f2 - f3)^2) + (B^2*f1^2*i0*q0*s0*exp(-f2*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) + (B^2*f1^2*i0*q0*s0*exp(-f3*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) + (B^2*f1^2*i0*q0*s0*exp(-f2*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B^2*f1^2*i0*q0*s0*exp(-f3*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B*e0*f3^2*k*s0*exp(-f2*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (B*f1^2*i0*phi*s0*exp(-f2*t))/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (B*f1^2*i0*phi*s0*exp(-f3*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B*e0*f2^2*s0*v*exp(-f3*t))/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B^2*f2^2*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) - (B^2*f3^2*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) - (B^2*f3*i0^2*s0*exp(-f2*t))/(f2^2*(f2 - f3)) + (B^2*f3*i0^2*s0*exp(-2*f2*t))/(2*f2^2*(f2 - f3)) + (B^2*f2*q0^2*s0*exp(-f3*t))/(f3^2*(f2 - f3)) - (B^2*f2*q0^2*s0*exp(-2*f3*t))/(2*f3^2*(f2 - f3)) + (B^2*f2*i0*q0*s0*exp(-f2*t))/((f1 - f2)*(f2 - f3)^2) + (B^2*f2*i0*q0*s0*exp(-f3*t))/((f1 - f2)*(f2 - f3)^2) + (B^2*f3*i0*q0*s0*exp(-f2*t))/((f1 - f3)*(f2 - f3)^2) + (B^2*f3*i0*q0*s0*exp(-f3*t))/((f1 - f3)*(f2 - f3)^2) + (B^2*f3^2*i0^2*s0*exp(-f2*t))/(f2*(f1 - f2)*(f2 - f3)^2) + (B^2*f2^2*q0^2*s0*exp(-f3*t))/(f3*(f1 - f3)*(f2 - f3)^2) - (B*e0*f2*k*s0*exp(-f2*t))/((f1 - f2)*(f2 - f3)^2) + (2*B*e0*f3*k*s0*exp(-f2*t))/((f1 - f2)*(f2 - f3)^2) - (B*f2*i0*phi*s0*exp(-f2*t))/((f1 - f2)*(f2 - f3)^2) - (B*f3*i0*phi*s0*exp(-f3*t))/((f1 - f3)*(f2 - f3)^2) + (2*B*e0*f2*s0*v*exp(-f3*t))/((f1 - f3)*(f2 - f3)^2) - (B*e0*f3*s0*v*exp(-f3*t))/((f1 - f3)*(f2 - f3)^2) + (B^2*f1*f3^2*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^3 + f1^2*f2*f3^2 + f1*f2^4 + f1*f2^3*f3 - f1*f2^2*f3^2 - f1*f2*f3^3 - f2^4*f3 + f2^2*f3^3) - (B^2*f1^2*f3*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^3 + f1^2*f2*f3^2 + f1*f2^4 + f1*f2^3*f3 - f1*f2^2*f3^2 - f1*f2*f3^3 - f2^4*f3 + f2^2*f3^3) + (B^2*f1*f2^2*i0*q0*s0*exp(- f2*t - f3*t))/(f1^2*f2^2*f3 - f1^2*f3^3 - f1*f2^3*f3 - f1*f2^2*f3^2 + f1*f2*f3^3 + f1*f3^4 + f2^3*f3^2 - f2*f3^4) - (B^2*f1^2*f2*i0*q0*s0*exp(- f2*t - f3*t))/(f1^2*f2^2*f3 - f1^2*f3^3 - f1*f2^3*f3 - f1*f2^2*f3^2 + f1*f2*f3^3 + f1*f3^4 + f2^3*f3^2 - f2*f3^4) - (B^2*f1*f2*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) + (B^2*f1*f3*i0*q0*s0*exp(- f2*t - f3*t))/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) - (B^2*f2^2*i0*q0*s0*exp(-f2*t))/(f3*(f1 - f2)*(f2 - f3)^2) - (B^2*f3^2*i0*q0*s0*exp(-f2*t))/(f2*(f1 - f3)*(f2 - f3)^2) - (B^2*f2^2*i0*q0*s0*exp(-f3*t))/(f3*(f1 - f2)*(f2 - f3)^2) - (B^2*f3^2*i0*q0*s0*exp(-f3*t))/(f2*(f1 - f3)*(f2 - f3)^2) - (B*e0*f3^2*k*s0*exp(-f2*t))/(f2*(f1 - f3)*(f2 - f3)^2) + (B*f3^2*i0*phi*s0*exp(-f2*t))/(f2*(f1 - f3)*(f2 - f3)^2) + (B*f2^2*i0*phi*s0*exp(-f3*t))/(f3*(f1 - f2)*(f2 - f3)^2) - (B*e0*f2^2*s0*v*exp(-f3*t))/(f3*(f1 - f2)*(f2 - f3)^2)) - exp(-t*u)*((B*e0*k*s0 - (B*e0*f3*k*s0 + B*e0*f2*s0*v)/f1 + B*e0*s0*v)/(f1*f2 + f1*f3 - f2*f3 - f1^2) + (B*a*i0)/(- u^2 + f2*u) + (B*a*q0)/(- u^2 + f3*u) - (B*a*i0)/(f2*u) - (B*a*q0)/(f3*u) + (B^2*f1^2*i0^2*s0)/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (B^2*f3^2*i0^2*s0)/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) + (B^2*f1^2*q0^2*s0)/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) - (B^2*f2^2*q0^2*s0)/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B^2*i0^2*s0)/(2*f2*(f2 - f3)) - (B^2*q0^2*s0)/(2*f3*(f2 - f3)) - (B*e0*f3^2*k*s0)/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) + (B*f1^2*i0*phi*s0)/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) + (B*f1^2*i0*phi*s0)/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) - (B*e0*f2^2*s0*v)/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) + (B^2*f3*i0^2*s0)/(2*f2^2*(f2 - f3)) - (B^2*f2*q0^2*s0)/(2*f3^2*(f2 - f3)) + (B^2*f2*i0^2*s0)/((f1 - f2)*(f2 - f3)^2) + (B^2*f3*q0^2*s0)/((f1 - f3)*(f2 - f3)^2) - (2*B^2*f1^2*i0*q0*s0)/(- f1^2*f2^2 + f1^2*f2*f3 + f1*f2^3 - f1*f2*f3^2 - f2^3*f3 + f2^2*f3^2) - (2*B^2*f1^2*i0*q0*s0)/(f1^2*f2*f3 - f1^2*f3^2 - f1*f2^2*f3 + f1*f3^3 + f2^2*f3^2 - f2*f3^3) - (B^2*f2^2*i0*q0*s0)/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) + (B^2*f3^2*i0*q0*s0)/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) + (B*e0*f2*k*s0)/((f1 - f2)*(f2 - f3)^2) - (2*B*e0*f3*k*s0)/((f1 - f2)*(f2 - f3)^2) + (B*f2*i0*phi*s0)/((f1 - f2)*(f2 - f3)^2) + (B*f3*i0*phi*s0)/((f1 - f3)*(f2 - f3)^2) - (2*B*e0*f2*s0*v)/((f1 - f3)*(f2 - f3)^2) + (B*e0*f3*s0*v)/((f1 - f3)*(f2 - f3)^2) - (2*B^2*f2*i0*q0*s0)/((f1 - f2)*(f2 - f3)^2) - (2*B^2*f3*i0*q0*s0)/((f1 - f3)*(f2 - f3)^2) - (B^2*f3^2*i0^2*s0)/(f2*(f1 - f2)*(f2 - f3)^2) - (B^2*f2^2*q0^2*s0)/(f3*(f1 - f3)*(f2 - f3)^2) - (B^2*f1*f3^2*i0*q0*s0)/(- f1^2*f2^3 + f1^2*f2*f3^2 + f1*f2^4 + f1*f2^3*f3 - f1*f2^2*f3^2 - f1*f2*f3^3 - f2^4*f3 + f2^2*f3^3) + (B^2*f1^2*f3*i0*q0*s0)/(- f1^2*f2^3 + f1^2*f2*f3^2 + f1*f2^4 + f1*f2^3*f3 - f1*f2^2*f3^2 - f1*f2*f3^3 - f2^4*f3 + f2^2*f3^3) - (B^2*f1*f2^2*i0*q0*s0)/(f1^2*f2^2*f3 - f1^2*f3^3 - f1*f2^3*f3 - f1*f2^2*f3^2 + f1*f2*f3^3 + f1*f3^4 + f2^3*f3^2 - f2*f3^4) + (B^2*f1^2*f2*i0*q0*s0)/(f1^2*f2^2*f3 - f1^2*f3^3 - f1*f2^3*f3 - f1*f2^2*f3^2 + f1*f2*f3^3 + f1*f3^4 + f2^3*f3^2 - f2*f3^4) + (B^2*f1*f2*i0*q0*s0)/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) - (B^2*f1*f3*i0*q0*s0)/(- f1^2*f2^2 + f1^2*f3^2 + f1*f2^3 + f1*f2^2*f3 - f1*f2*f3^2 - f1*f3^3 - f2^3*f3 + f2*f3^3) + (B*e0*f3^2*k*s0)/(f2*(f1 - f3)*(f2 - f3)^2) - (B*f2^2*i0*phi*s0)/(f3*(f1 - f2)*(f2 - f3)^2) - (B*f3^2*i0*phi*s0)/(f2*(f1 - f3)*(f2 - f3)^2) + (B*e0*f2^2*s0*v)/(f3*(f1 - f2)*(f2 - f3)^2) + (2*B^2*f2^2*i0*q0*s0)/(f3*(f1 - f2)*(f2 - f3)^2) + (2*B^2*f3^2*i0*q0*s0)/(f2*(f1 - f3)*(f2 - f3)^2));

    % e1=dsolve('De1+f1*e1-B*(s0*exp(-u*t)*(((e0*k*exp(-f2*t))/(f1 - f2) - (e0*k*exp(f2*t - f1*t)*exp(-f2*t))/(f1 - f2))+(exp(-f3*t)*((i0*phi)/(f2 - f3) + (e0*v)/(f1 - f3)) - exp(-f3*t)*((i0*phi*exp(f3*t)*exp(-f2*t))/(f2 - f3) + (e0*v*exp(-f1*t)*exp(f3*t))/(f1 - f3))))+(exp(-t*u)*((a*f3*exp(t*u) + B*q0*s0*u*exp(-f3*t))/(f3*u) + (B*i0*s0*exp(-f2*t))/f2) - exp(-t*u)*((a*f3 + B*q0*s0*u)/(f3*u) + (B*i0*s0)/f2))*(i0*exp(-f2*t)+q0*exp(-f3*t)))=0','e1(0)=0')
    e1 =exp(-f1*t)*(((exp(f1*t - f2*t - t*u)*(q0*s0*B^2*f2^3*i0 + s0*B^2*f2^2*f3*i0^2 - q0*s0*B^2*f2^2*f3*i0 - f1*q0*s0*B^2*f2^2*i0 - s0*B^2*f2*f3^2*i0^2 - f1*s0*B^2*f2*f3*i0^2 + f1*q0*s0*B^2*f2*f3*i0 + f1*s0*B^2*f3^2*i0^2 + phi*s0*B*f2^2*f3*i0 + e0*k*s0*B*f2^2*f3 - e0*k*s0*B*f2*f3^2 - f1*phi*s0*B*f2*f3*i0))/(f2 - f1 + u) - (exp(f1*t - f2*t - f3*t - t*u)*(i0*q0*s0*B^2*f2^3 - f1*i0*q0*s0*B^2*f2^2 - i0*q0*s0*B^2*f2*f3^2 + f1*i0*q0*s0*B^2*f3^2))/(f2 - f1 + f3 + u) + (B^2*f3*i0^2*s0*exp(f1*t - 2*f2*t - t*u)*(f1*f2 - f1*f3 + f2*f3 - f2^2))/(2*f2 - f1 + u))/(f2^3*f3 - f2^2*f3^2 - f1*f2^2*f3 + f1*f2*f3^2) + (B*a*i0*exp(f1*t - f2*t))/(f1*u - f2*u) + (B*a*q0*exp(f1*t - f3*t))/(f1*u - f3*u) + (B*a*i0*exp(f1*t - f2*t - t*u))/(f2*u - f1*u + u^2) + (B*a*q0*exp(f1*t - f3*t - t*u))/(f3*u - f1*u + u^2) - (B^2*f1^2*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f2^2*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f1^2*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) - (B^2*f2^2*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) + (B^2*f1*f3*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f2*f3*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f1*f3*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) + (B^2*f2*f3*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) + (B^2*f1^2*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f3^2*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f3^2*k*s0*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f2^2*s0*v*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B*f1^2*i0*phi*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*e0*f2^2*s0*v*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f1*f2^2*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + f1^2*f2*f3^2 + u*f1^2*f2*f3 - 2*f1^2*f3^3 - u*f1^2*f3^2 - 2*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + f1*f3^4 + u*f1*f3^3 + f2^2*f3^3 + u*f2^2*f3^2 - f2*f3^4 - u*f2*f3^3) + (B^2*f1^2*f2*q0^2*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + f1^2*f2*f3^2 + u*f1^2*f2*f3 - 2*f1^2*f3^3 - u*f1^2*f3^2 - 2*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + f1*f3^4 + u*f1*f3^3 + f2^2*f3^3 + u*f2^2*f3^2 - f2*f3^4 - u*f2*f3^3) + (B^2*f1*f2^2*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + 2*f1^2*f2*f3^2 + u*f1^2*f2*f3 - 3*f1^2*f3^3 - u*f1^2*f3^2 - 3*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + 2*f1*f3^4 + u*f1*f3^3 + 2*f2^2*f3^3 + u*f2^2*f3^2 - 2*f2*f3^4 - u*f2*f3^3) - (B^2*f1^2*f2*q0^2*s0*exp(f1*t - 2*f3*t - t*u))/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + 2*f1^2*f2*f3^2 + u*f1^2*f2*f3 - 3*f1^2*f3^3 - u*f1^2*f3^2 - 3*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + 2*f1*f3^4 + u*f1*f3^3 + 2*f2^2*f3^3 + u*f2^2*f3^2 - 2*f2*f3^4 - u*f2*f3^3) - (B^2*f1*f2*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f2*f3*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f1*f2*k*s0*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f1*f3*k*s0*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f2*f3*k*s0*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B*e0*f1*f2*s0*v*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f1*f3*s0*v*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B*e0*f2*f3*s0*v*exp(-t*u))/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B^2*f1*f3^2*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2^2 + f1^3*f2*f3 + f1^2*f2^3 + f1^2*f2^2*f3 + u*f1^2*f2^2 - 2*f1^2*f2*f3^2 - u*f1^2*f2*f3 - 2*f1*f2^3*f3 - u*f1*f2^3 + f1*f2^2*f3^2 + f1*f2*f3^3 + u*f1*f2*f3^2 + f2^3*f3^2 + u*f2^3*f3 - f2^2*f3^3 - u*f2^2*f3^2) - (B^2*f1^2*f3*i0*q0*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2^2 + f1^3*f2*f3 + f1^2*f2^3 + f1^2*f2^2*f3 + u*f1^2*f2^2 - 2*f1^2*f2*f3^2 - u*f1^2*f2*f3 - 2*f1*f2^3*f3 - u*f1*f2^3 + f1*f2^2*f3^2 + f1*f2*f3^3 + u*f1*f2*f3^2 + f2^3*f3^2 + u*f2^3*f3 - f2^2*f3^3 - u*f2^2*f3^2) + (B*f1*f2*i0*phi*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*f1*f3*i0*phi*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*f2*f3*i0*phi*s0*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f1*f2*s0*v*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*e0*f1*f3*s0*v*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f2*f3*s0*v*exp(f1*t - f3*t - t*u))/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2)) - exp(-f1*t)*(((q0*s0*B^2*f2^3*i0 + s0*B^2*f2^2*f3*i0^2 - q0*s0*B^2*f2^2*f3*i0 - f1*q0*s0*B^2*f2^2*i0 - s0*B^2*f2*f3^2*i0^2 - f1*s0*B^2*f2*f3*i0^2 + f1*q0*s0*B^2*f2*f3*i0 + f1*s0*B^2*f3^2*i0^2 + phi*s0*B*f2^2*f3*i0 + e0*k*s0*B*f2^2*f3 - e0*k*s0*B*f2*f3^2 - f1*phi*s0*B*f2*f3*i0)/(f2 - f1 + u) - (i0*q0*s0*B^2*f2^3 - f1*i0*q0*s0*B^2*f2^2 - i0*q0*s0*B^2*f2*f3^2 + f1*i0*q0*s0*B^2*f3^2)/(f2 - f1 + f3 + u) + (B^2*f3*i0^2*s0*(f1*f2 - f1*f3 + f2*f3 - f2^2))/(2*f2 - f1 + u))/(f2^3*f3 - f2^2*f3^2 - f1*f2^2*f3 + f1*f2*f3^2) + (B*a*i0)/(f2*u - f1*u + u^2) + (B*a*q0)/(f3*u - f1*u + u^2) + (B*a*i0)/(f1*u - f2*u) + (B*a*q0)/(f1*u - f3*u) - (B^2*f1^2*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f2^2*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f1^2*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) - (B^2*f2^2*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) - (B*f1^2*i0*phi*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*e0*f2^2*s0*v)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f1*f2^2*q0^2*s0)/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + f1^2*f2*f3^2 + u*f1^2*f2*f3 - 2*f1^2*f3^3 - u*f1^2*f3^2 - 2*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + f1*f3^4 + u*f1*f3^3 + f2^2*f3^3 + u*f2^2*f3^2 - f2*f3^4 - u*f2*f3^3) + (B^2*f1^2*f2*q0^2*s0)/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + f1^2*f2*f3^2 + u*f1^2*f2*f3 - 2*f1^2*f3^3 - u*f1^2*f3^2 - 2*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + f1*f3^4 + u*f1*f3^3 + f2^2*f3^3 + u*f2^2*f3^2 - f2*f3^4 - u*f2*f3^3) + (B^2*f1*f2^2*q0^2*s0)/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + 2*f1^2*f2*f3^2 + u*f1^2*f2*f3 - 3*f1^2*f3^3 - u*f1^2*f3^2 - 3*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + 2*f1*f3^4 + u*f1*f3^3 + 2*f2^2*f3^3 + u*f2^2*f3^2 - 2*f2*f3^4 - u*f2*f3^3) - (B^2*f1^2*f2*q0^2*s0)/(- f1^3*f2*f3 + f1^3*f3^2 + f1^2*f2^2*f3 + 2*f1^2*f2*f3^2 + u*f1^2*f2*f3 - 3*f1^2*f3^3 - u*f1^2*f3^2 - 3*f1*f2^2*f3^2 - u*f1*f2^2*f3 + f1*f2*f3^3 + 2*f1*f3^4 + u*f1*f3^3 + 2*f2^2*f3^3 + u*f2^2*f3^2 - 2*f2*f3^4 - u*f2*f3^3) - (B*e0*f3^2*k*s0)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f2^2*s0*v)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B^2*f1*f3*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f2*f3*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f1*f3*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) + (B^2*f2*f3*q0^2*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + 2*f1^2*f2*f3 + u*f1^2*f2 - 3*f1^2*f3^2 - u*f1^2*f3 - 3*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + 2*f1*f3^3 + u*f1*f3^2 + 2*f2^2*f3^2 + u*f2^2*f3 - 2*f2*f3^3 - u*f2*f3^2) + (B^2*f1^2*i0*q0*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B^2*f3^2*i0*q0*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f1*f3^2*i0*q0*s0)/(- f1^3*f2^2 + f1^3*f2*f3 + f1^2*f2^3 + f1^2*f2^2*f3 + u*f1^2*f2^2 - 2*f1^2*f2*f3^2 - u*f1^2*f2*f3 - 2*f1*f2^3*f3 - u*f1*f2^3 + f1*f2^2*f3^2 + f1*f2*f3^3 + u*f1*f2*f3^2 + f2^3*f3^2 + u*f2^3*f3 - f2^2*f3^3 - u*f2^2*f3^2) - (B^2*f1^2*f3*i0*q0*s0)/(- f1^3*f2^2 + f1^3*f2*f3 + f1^2*f2^3 + f1^2*f2^2*f3 + u*f1^2*f2^2 - 2*f1^2*f2*f3^2 - u*f1^2*f2*f3 - 2*f1*f2^3*f3 - u*f1*f2^3 + f1*f2^2*f3^2 + f1*f2*f3^3 + u*f1*f2*f3^2 + f2^3*f3^2 + u*f2^3*f3 - f2^2*f3^3 - u*f2^2*f3^2) + (B*f1*f2*i0*phi*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*f1*f3*i0*phi*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*f2*f3*i0*phi*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f1*f2*s0*v)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B*e0*f1*f3*s0*v)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f2*f3*s0*v)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) - (B*e0*f1*f2*k*s0)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f1*f3*k*s0)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f2*f3*k*s0)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B*e0*f1*f2*s0*v)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) + (B*e0*f1*f3*s0*v)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B*e0*f2*f3*s0*v)/(- u*f1^2*f2 + u*f1^2*f3 + u*f1*f2^2 - u*f1*f3^2 - u*f2^2*f3 + u*f2*f3^2) - (B^2*f1*f2*i0*q0*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2) + (B^2*f2*f3*i0*q0*s0)/(- f1^3*f2 + f1^3*f3 + f1^2*f2^2 + f1^2*f2*f3 + u*f1^2*f2 - 2*f1^2*f3^2 - u*f1^2*f3 - 2*f1*f2^2*f3 - u*f1*f2^2 + f1*f2*f3^2 + f1*f3^3 + u*f1*f3^2 + f2^2*f3^2 + u*f2^2*f3 - f2*f3^3 - u*f2*f3^2));

    % i1=dsolve('Di1+f2*i1-k*(exp(-f1*t)*((B*i0*s0)/(f2 - f1 + u) + (B*q0*s0)/(f3 - f1 + u)) - exp(-f1*t)*((B*i0*s0*exp(f1*t)*exp(-f2*t)*exp(-t*u))/(f2 - f1 + u) + (B*q0*s0*exp(f1*t)*exp(-f3*t)*exp(-t*u))/(f3 - f1 + u)))=0','i1(0)=0')
    i2 = - (exp(-f2*t)*(exp(-t*u)*((B*f1*i0*k*s0 - B*f3*i0*k*s0)/u - B*i0*k*s0) + exp(f2*t - f1*t)*((B*f3*i0*k*s0 - B*f1*i0*k*s0 + B*i0*k*s0*u + B*k*q0*s0*u)/(f1 - f2) - B*k*q0*s0) - (exp(f2*t - f3*t - t*u)*(B*f2*k*q0*s0 - B*f1*k*q0*s0 + B*k*q0*s0*u))/(f3 - f2 + u)))/(f2*f3 - f1*f3 - f1*f2 - 2*f1*u + f2*u + f3*u + f1^2 + u^2) - (exp(-f2*t)*((B*f2*k*q0*s0 - B*f1*k*q0*s0 + B*k*q0*s0*u)/(f3 - f2 + u) - (B*f1*i0*k*s0 - B*f3*i0*k*s0)/u - (B*f3*i0*k*s0 - B*f1*i0*k*s0 + B*i0*k*s0*u + B*k*q0*s0*u)/(f1 - f2) + B*i0*k*s0 + B*k*q0*s0))/(f2*f3 - f1*f3 - f1*f2 - 2*f1*u + f2*u + f3*u + f1^2 + u^2);

    % q1=dsolve('Dq1+f3*q1-(v*exp(-f1*t)*((B*i0*s0)/(f2 - f1 + u) + (B*q0*s0)/(f3 - f1 + u)) - exp(-f1*t)*((B*i0*s0*exp(f1*t)*exp(-f2*t)*exp(-t*u))/(f2 - f1 + u) + (B*q0*s0*exp(f1*t)*exp(-f3*t)*exp(-t*u))/(f3 - f1 + u)))-(phi*(e0*k*exp(-f2*t))/(f1 - f2) - (e0*k*exp(f2*t - f1*t)*exp(-f2*t))/(f1 - f2))','q1(0)=0')
    q1 =(exp(-f3*t)*(exp(-t*u)*((B*q0*s0*f1^2 - 2*B*q0*s0*f1*f2 + B*q0*s0*f2^2)/u - B*f1*q0*s0 + B*f2*q0*s0) + (exp(f3*t - f2*t - t*u)*(B*f1^2*i0*s0 - B*f1*f2*i0*s0 - B*f1*f3*i0*s0 + B*f2*f3*i0*s0 - B*f1*i0*s0*u + B*f2*i0*s0*u))/(f2 - f3 + u) + (exp(f3*t - f2*t)*(e0*f1^2*k*phi + e0*k*phi*u^2 - e0*f1*f2*k*phi - e0*f1*f3*k*phi + e0*f2*f3*k*phi - 2*e0*f1*k*phi*u + e0*f2*k*phi*u + e0*f3*k*phi*u))/(f2 - f3) - (exp(f3*t - f1*t)*(e0*k*u^2 + e0*f1^2*k - 2*e0*f1*k*u + e0*f2*k*u + e0*f3*k*u - e0*f1*f2*k - e0*f1*f3*k + e0*f2*f3*k + B*f1^2*i0*s0*v + B*f1^2*q0*s0*v + B*f2^2*q0*s0*v - B*f1*f2*i0*s0*v - B*f1*f3*i0*s0*v + B*f2*f3*i0*s0*v - 2*B*f1*f2*q0*s0*v - B*f1*i0*s0*u*v + B*f2*i0*s0*u*v - B*f1*q0*s0*u*v + B*f2*q0*s0*u*v))/(f1 - f3)))/(- f1^3 + 2*f1^2*f2 + 2*f1^2*u + f3*f1^2 - f1*f2^2 - 3*f1*f2*u - 2*f3*f1*f2 - f1*u^2 - f3*f1*u + f2^2*u + f3*f2^2 + f2*u^2 + f3*f2*u) - (exp(-f3*t)*((e0*f1^2*k*phi + e0*k*phi*u^2 - e0*f1*f2*k*phi - e0*f1*f3*k*phi + e0*f2*f3*k*phi - 2*e0*f1*k*phi*u + e0*f2*k*phi*u + e0*f3*k*phi*u)/(f2 - f3) - (e0*k*u^2 + e0*f1^2*k - 2*e0*f1*k*u + e0*f2*k*u + e0*f3*k*u - e0*f1*f2*k - e0*f1*f3*k + e0*f2*f3*k + B*f1^2*i0*s0*v + B*f1^2*q0*s0*v + B*f2^2*q0*s0*v - B*f1*f2*i0*s0*v - B*f1*f3*i0*s0*v + B*f2*f3*i0*s0*v - 2*B*f1*f2*q0*s0*v - B*f1*i0*s0*u*v + B*f2*i0*s0*u*v - B*f1*q0*s0*u*v + B*f2*q0*s0*u*v)/(f1 - f3) + (B*q0*s0*f1^2 - 2*B*q0*s0*f1*f2 + B*q0*s0*f2^2)/u + (B*f1^2*i0*s0 - B*f1*f2*i0*s0 - B*f1*f3*i0*s0 + B*f2*f3*i0*s0 - B*f1*i0*s0*u + B*f2*i0*s0*u)/(f2 - f3 + u) - B*f1*q0*s0 + B*f2*q0*s0))/(- f1^3 + 2*f1^2*f2 + 2*f1^2*u + f3*f1^2 - f1*f2^2 - 3*f1*f2*u - 2*f3*f1*f2 - f1*u^2 - f3*f1*u + f2^2*u + f3*f2^2 + f2*u^2 + f3*f2*u);

    % r1=dsolve('Dr1+u*r1-(g_1*((e0*k*exp(-f2*t))/(f1 - f2) - (e0*k*exp(f2*t - f1*t)*exp(-f2*t))/(f1 - f2)))-(g_2*(exp(-f1*t)*((B*i0*s0)/(f2 - f1 + u) + (B*q0*s0)/(f3 - f1 + u)) - exp(-f1*t)*((B*i0*s0*exp(f1*t)*exp(-f2*t)*exp(-t*u))/(f2 - f1 + u) + (B*q0*s0*exp(f1*t)*exp(-f3*t)*exp(-t*u))/(f3 - f1 + u))))-(g_3*(exp(-f3*t)*((i0*phi)/(f2 - f3) + (e0*v)/(f1 - f3)) - exp(-f3*t)*((i0*phi*exp(f3*t)*exp(-f2*t))/(f2 - f3) + (e0*v*exp(-f1*t)*exp(f3*t))/(f1 - f3))))=0','r1(0)=0')
    r1 =exp(-t*u)*(exp(-f3*t)*((B*g_2*q0*s0)/(f3*(f3 - f1 + u)) - (g_3*exp(t*u)*(f1*i0*phi - f3*i0*phi + e0*f2*v - e0*f3*v))/((f1 - f3)*(f2 - f3)*(f3 - u))) + exp(-f2*t)*((exp(t*u)*(f1*g_3*i0*phi - f2*g_3*i0*phi - e0*f2*g_1*k + e0*f3*g_1*k))/((f1 - f2)*(f2 - f3)*(f2 - u)) + (B*g_2*i0*s0)/(f2*(f2 - f1 + u))) - (exp(t*u - f1*t)*(e0*f1^2*f2*g_1*k - e0*f1^3*g_3*v - B*f1^3*g_2*i0*s0 - B*f1^3*g_2*q0*s0 - e0*f1^3*g_1*k - e0*f1*f3^2*g_1*k + 2*e0*f1^2*f3*g_1*k + e0*f2*f3^2*g_1*k - e0*f1*f2^2*g_3*v + 2*e0*f1^2*f2*g_3*v + e0*f1^2*f3*g_3*v + e0*f2^2*f3*g_3*v - e0*f1*g_1*k*u^2 + 2*e0*f1^2*g_1*k*u + e0*f3*g_1*k*u^2 + e0*f3^2*g_1*k*u - e0*f1*g_3*u^2*v + 2*e0*f1^2*g_3*u*v + e0*f2*g_3*u^2*v + e0*f2^2*g_3*u*v + B*f1^2*f2*g_2*i0*s0 - B*f1*f3^2*g_2*i0*s0 + 2*B*f1^2*f3*g_2*i0*s0 + B*f2*f3^2*g_2*i0*s0 - B*f1*f2^2*g_2*q0*s0 + 2*B*f1^2*f2*g_2*q0*s0 + B*f1^2*f3*g_2*q0*s0 + B*f2^2*f3*g_2*q0*s0 + B*f1^2*g_2*i0*s0*u + B*f1^2*g_2*q0*s0*u - 2*e0*f1*f2*f3*g_1*k - 2*e0*f1*f2*f3*g_3*v - e0*f1*f2*g_1*k*u - 3*e0*f1*f3*g_1*k*u + e0*f2*f3*g_1*k*u - 3*e0*f1*f2*g_3*u*v - e0*f1*f3*g_3*u*v + e0*f2*f3*g_3*u*v - 2*B*f1*f2*f3*g_2*i0*s0 - 2*B*f1*f2*f3*g_2*q0*s0 - B*f1*f2*g_2*i0*s0*u - B*f1*f3*g_2*i0*s0*u + B*f2*f3*g_2*i0*s0*u - B*f1*f2*g_2*q0*s0*u - B*f1*f3*g_2*q0*s0*u + B*f2*f3*g_2*q0*s0*u))/((f1 - f2)*(f1 - f3)*(f1 - u)*(f2 - f1 + u)*(f3 - f1 + u))) - exp(-t*u)*((f1*g_3*i0*phi - f2*g_3*i0*phi - e0*f2*g_1*k + e0*f3*g_1*k)/((f1 - f2)*(f2 - f3)*(f2 - u)) - (g_3*(f1*i0*phi - f3*i0*phi + e0*f2*v - e0*f3*v))/((f1 - f3)*(f2 - f3)*(f3 - u)) + (B*g_2*i0*s0)/(f2*(f2 - f1 + u)) + (B*g_2*q0*s0)/(f3*(f3 - f1 + u)) - (e0*f1^2*f2*g_1*k - e0*f1^3*g_3*v - B*f1^3*g_2*i0*s0 - B*f1^3*g_2*q0*s0 - e0*f1^3*g_1*k - e0*f1*f3^2*g_1*k + 2*e0*f1^2*f3*g_1*k + e0*f2*f3^2*g_1*k - e0*f1*f2^2*g_3*v + 2*e0*f1^2*f2*g_3*v + e0*f1^2*f3*g_3*v + e0*f2^2*f3*g_3*v - e0*f1*g_1*k*u^2 + 2*e0*f1^2*g_1*k*u + e0*f3*g_1*k*u^2 + e0*f3^2*g_1*k*u - e0*f1*g_3*u^2*v + 2*e0*f1^2*g_3*u*v + e0*f2*g_3*u^2*v + e0*f2^2*g_3*u*v + B*f1^2*f2*g_2*i0*s0 - B*f1*f3^2*g_2*i0*s0 + 2*B*f1^2*f3*g_2*i0*s0 + B*f2*f3^2*g_2*i0*s0 - B*f1*f2^2*g_2*q0*s0 + 2*B*f1^2*f2*g_2*q0*s0 + B*f1^2*f3*g_2*q0*s0 + B*f2^2*f3*g_2*q0*s0 + B*f1^2*g_2*i0*s0*u + B*f1^2*g_2*q0*s0*u - 2*e0*f1*f2*f3*g_1*k - 2*e0*f1*f2*f3*g_3*v - e0*f1*f2*g_1*k*u - 3*e0*f1*f3*g_1*k*u + e0*f2*f3*g_1*k*u - 3*e0*f1*f2*g_3*u*v - e0*f1*f3*g_3*u*v + e0*f2*f3*g_3*u*v - 2*B*f1*f2*f3*g_2*i0*s0 - 2*B*f1*f2*f3*g_2*q0*s0 - B*f1*f2*g_2*i0*s0*u - B*f1*f3*g_2*i0*s0*u + B*f2*f3*g_2*i0*s0*u - B*f1*f2*g_2*q0*s0*u - B*f1*f3*g_2*q0*s0*u + B*f2*f3*g_2*q0*s0*u)/((f1 - f2)*(f1 - f3)*(f1 - u)*(f2 - f1 + u)*(f3 - f1 + u)));
    
    
    S(i) = s_not + (s) + (s1);
    E(i) = e_not + (e) + (e1);
    I(i) = i_not + (i1) + (i2);
    Q(i) = q_not + (q) + (q1);
    R(i) = r_not + (r) + (r1);
    
    fprintf('S(%.1f)= %.6f\n',i,S(i));
    fprintf('E(%.1f)= %.6f\n',i,E(i));
    fprintf('I(%.1f)= %.6f\n',i,I(i));
    fprintf('Q(%.1f)= %.6f\n',i,Q(i));
    fprintf('R(%.1f)= %.6f\n',i,R(i));
    
    
    
    xx(i)=i;
    
end

plot(xx,S(1:i),'r',xx,E(1:i),'b',xx,I(1:i),'g',xx,Q(1:i),'y',xx,R(1:i),'v');
hold on
xlabel('Time/days')
ylabel('SEIQR')
legend('Susceptible','Exposed','Infected','Quarantined','Recovered')